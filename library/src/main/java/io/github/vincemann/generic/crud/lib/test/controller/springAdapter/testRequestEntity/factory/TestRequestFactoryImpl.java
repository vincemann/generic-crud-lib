package io.github.vincemann.generic.crud.lib.test.controller.springAdapter.testRequestEntity.factory;

import io.github.vincemann.generic.crud.lib.controller.springAdapter.DtoCrudController_SpringAdapter;
import io.github.vincemann.generic.crud.lib.test.controller.springAdapter.UrlParamIdControllerIntegrationTest;
import io.github.vincemann.generic.crud.lib.test.controller.springAdapter.testRequestEntity.factory.defaultUriFactory.UrlParamId_DefaultUri_Factory;
import io.github.vincemann.generic.crud.lib.test.controller.springAdapter.testRequestEntity.factory.requestEntityModification.TestRequestEntity_ModificationStrategy;
import org.junit.jupiter.api.Assertions;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.method.RequestMappingInfo;

import java.util.Set;

/**
 * If a {@link TestRequestEntity} was specified (is not null) in {@link TestRequestFactoryImpl#createInstance(CrudController_TestCase, TestRequestEntity_Modification, Object)}  ,
 * then all fields of {@link TestRequestEntity}, that are not null, will override the values of the default {@link TestRequestEntity}, generated by this class.
 *
 * If mentioned {@link TestRequestEntity} is null, then the default {@link TestRequestEntity} generated by this class will be used.
 *
 */
public class TestRequestFactoryImpl implements TestRequestEntity_Factory {
    //todo remove

    private UrlParamIdControllerIntegrationTest crudControllerTest;
    private UrlParamId_DefaultUri_Factory urlParamIdDefaultUriFactory;
    private TestRequestEntity_ModificationStrategy testRequestEntityModificationStrategy;


    public TestRequestFactoryImpl(UrlParamId_DefaultUri_Factory urlParamIdDefaultUriFactory, TestRequestEntity_ModificationStrategy testRequestEntityModificationStrategy) {
        this.urlParamIdDefaultUriFactory = urlParamIdDefaultUriFactory;
        this.testRequestEntityModificationStrategy = testRequestEntityModificationStrategy;
    }

    @Override
    public void setTest(UrlParamIdControllerIntegrationTest test) {
        this.crudControllerTest=test;
        this.urlParamIdDefaultUriFactory.setBaseAddressProvider(test);
    }

    public UrlParamIdControllerIntegrationTest getCrudControllerTest() {
        if(crudControllerTest==null){
            throw new IllegalStateException("No test class set yet");
        }
        return crudControllerTest;
    }

    @Override
    public TestRequestEntity createInstance(CrudController_TestCase crudControllerTestCase, Object id, TestRequestEntity_Modification... bundleTestRequestEntityModifications) {
        TestRequestEntity defaultTestRequestEntity = createDefaultTestRequestEntity(crudControllerTestCase,id);
        if(bundleTestRequestEntityModifications==null){
            return defaultTestRequestEntity;
        }else {
            testRequestEntityModificationStrategy.process(defaultTestRequestEntity,bundleTestRequestEntityModifications);
            //return modified defaultTestRequestEntity
            return defaultTestRequestEntity;
        }
    }

    private TestRequestEntity createDefaultTestRequestEntity(CrudController_TestCase crudControllerTestCase, Object id){
        return TestRequestEntity.builder()
                .url(urlParamIdDefaultUriFactory.createDefaultUri(mapTestCaseToMethodName(crudControllerTestCase),getCrudControllerTest().controller().getBaseUrl(),id,null))
                .expectedHttpStatus(mapTestCaseToHttpStatus(crudControllerTestCase))
                .method(mapTestCaseToHttpMethod(crudControllerTestCase))
                .build();
    }


    protected HttpStatus mapTestCaseToHttpStatus(CrudController_TestCase crudControllerTestCase){
        switch (crudControllerTestCase){
            case FAILED_FIND:
            case FAILED_DELETE:
                return HttpStatus.NOT_FOUND;
            case FAILED_CREATE:
            case FAILED_UPDATE:
                return HttpStatus.BAD_REQUEST;
            case SUCCESSFUL_FIND:
            case SUCCESSFUL_FIND_ALL:
            case SUCCESSFUL_DELETE:
            case SUCCESSFUL_CREATE:
            case SUCCESSFUL_UPDATE:
                return HttpStatus.OK;
        }
        throw new IllegalArgumentException("Invalid Test Case : " + crudControllerTestCase);
    }


    protected RequestMethod mapTestCaseToHttpMethod(CrudController_TestCase crudControllerTestCase){
        DtoCrudController_SpringAdapter crudController = getCrudControllerTest().controller();
        RequestMappingInfo requestMappingInfo=null;
        switch (crudControllerTestCase){
            case SUCCESSFUL_FIND:
            case FAILED_FIND:
                requestMappingInfo = crudController.getFindRequestMappingInfo();
                break;
            case SUCCESSFUL_FIND_ALL:
            case FAILED_FIND_ALL:
                requestMappingInfo = crudController.getFindAllRequestMappingInfo();
                break;
            case SUCCESSFUL_DELETE:
            case FAILED_DELETE:
                requestMappingInfo = crudController.getDeleteRequestMappingInfo();
                break;
            case SUCCESSFUL_UPDATE:
            case FAILED_UPDATE:
                requestMappingInfo = crudController.getUpdateRequestMappingInfo();
                break;
            case SUCCESSFUL_CREATE:
            case FAILED_CREATE:
                requestMappingInfo = crudController.getCreateRequestMappingInfo();
                break;
        }
        if(requestMappingInfo==null){
            throw new IllegalArgumentException("Invalid Test Case : " + crudControllerTestCase);
        }
        return findMethodOfRequestMappingInfo(requestMappingInfo);
    }

    private RequestMethod findMethodOfRequestMappingInfo(RequestMappingInfo requestMappingInfo){
        Set<RequestMethod> methods = requestMappingInfo.getMethodsCondition().getMethods();
        Assertions.assertEquals(1,methods.size());
        //noinspection OptionalGetWithoutIsPresent
        return methods.stream().findFirst().get();

    }

    protected String mapTestCaseToMethodName(CrudController_TestCase crudControllerTestCase){
        DtoCrudController_SpringAdapter crudController = getCrudControllerTest().controller();
        switch (crudControllerTestCase) {
            case SUCCESSFUL_FIND:
            case FAILED_FIND:
                return crudController.getFindMethodName();
            case SUCCESSFUL_FIND_ALL:
            case FAILED_FIND_ALL:
                return crudController.getFindAllMethodName();
            case FAILED_DELETE:
            case SUCCESSFUL_DELETE:
                return crudController.getDeleteMethodName();
            case SUCCESSFUL_UPDATE:
            case FAILED_UPDATE:
                return crudController.getUpdateMethodName();
            case SUCCESSFUL_CREATE:
            case FAILED_CREATE:
                return crudController.getCreateMethodName();
        }
        throw new IllegalArgumentException("Invalid Test Case : " + crudControllerTestCase);
    }




}
